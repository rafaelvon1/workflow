name: Revis√£o Autom√°tica com Gemini CLI

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Checkout completo do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      # 2Ô∏è‚É£ Instala depend√™ncias
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # 3Ô∏è‚É£ Obter diff do PR usando merge-base
      - name: Get diff of PR
        id: diff
        run: |
          git fetch origin main
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          MERGE_BASE=$(git merge-base $BASE_SHA $HEAD_SHA)
          echo "Merge base: $MERGE_BASE"
          git diff $MERGE_BASE $HEAD_SHA -- '*.java' '*.yml' '*.properties' --unified=0 > full_diff.diff
          echo "diff_file=full_diff.diff" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ Revis√£o com Gemini CLI
      - name: AI Review with Gemini CLI
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "## ü§ñ Revis√£o Autom√°tica de C√≥digo com IA" > review.md

          if [ ! -f "${{ steps.diff.outputs.diff_file }}" ]; then
            echo "Nenhuma altera√ß√£o detectada." >> review.md
          else
            # Limita diff a 500 linhas para evitar request muito grande
            diff_content=$(head -n 500 "${{ steps.diff.outputs.diff_file }}" || echo "Diff muito grande")
            diff_content=${diff_content:-"Nenhuma altera√ß√£o detectada"}

            # Escapa para JSON
            escaped_diff=$(printf '%s' "$diff_content" | jq -Rs .)

            # Chamada √† API do Gemini CLI / OpenAI
            raw_response=$(curl -sS -X POST https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $GEMINI_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"model\": \"gpt-4o-mini\",
                \"messages\": [
                  {\"role\": \"system\", \"content\": \"Voc√™ √© um revisor de c√≥digo experiente em Java Spring Boot.\"},
                  {\"role\": \"user\", \"content\": $escaped_diff}
                ],
                \"temperature\": 0.2
              }")

            # Extrai resposta da IA com fallback
            response=$(echo "$raw_response" | jq -r '.choices[0].message.content // "A IA n√£o retornou nenhum conte√∫do."')

            echo "$response" >> review.md
            echo "üìù Revis√£o completa gerada pela IA:"
            echo "$response"
          fi

      # 5Ô∏è‚É£ Upload do review como artefato
      - name: Upload review artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-review
          path: review.md

      # 6Ô∏è‚É£ Comentar no PR
      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: review.md
